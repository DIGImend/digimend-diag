#!/bin/bash
#
# Copyright (c) 2008 Nikolai Kondrashov
#
# This file is part of digimend-diag.
#
# Digimend-diag is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Digimend-diag is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with digimend-diag; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

HIDRD_DUMP=hidrd-dump
EVDEV_DUMP=evdev-dump
DEFAULT_DEVICE_NAME_PTRN="*Tablet*"

# We need case insensitive matching
shopt -s nocasematch

# Stop on the first error
set -e

function usage
{
    cat <<END
Usage: ${0##*/} [OPTION]...
Gather USB HID graphics tablet information and diagnostics.

General options

    -h, --help          This help message.

Tablet device (any single option will suffice)

    -i, --id=VENDOR:PRODUCT
                        USB vendor and product IDs in hex, separated by a
                        colon (as shown by lsusb, for example).
    -n, --name=PATTERN  Device name shell pattern. For example "*Tablet*"

All values are case insensitive. If no tablet device option is specified,
--name='$DEFAULT_DEVICE_NAME_PTRN' is assumed.

Output (if not specified, standard output is used)
    
    -o, --output=FILE   Output file.

END
}


function pause
{
    local title="$1"
    local message="$2"

    cat 1>&2 <<END
$title

$message

Press Enter to continue.
END
    read -s
    echo 1>&2
}


function confirm
{
    local question="$1"
    local yesno

    while true; do
        read -p "$question? [Y/n] " yesno
        if [ -z "$yesno" ]; then
            echo 1>&2
            return 0;
        fi

        case "$yesno" in
            y|yes)
                echo 1>&2
                return 0;
                ;;
            n|no)
                echo 1>&2
                return 1;
        esac
    done
}


function lookup_usb_id
{
    local usb_id="$1"

    # For each device having an ID (bustype/vendor/product/version)
    for d in /sys/class/input/*/id; do

        # If the device is not connected via USB
        if [ "`< $d/bustype`" != "0003" ]; then
            continue
        fi

        # If the device vendor and product ID's doesn't match
        if [[ "`< $d/vendor`:`< $d/product`" != "$usb_id" ]]; then
            continue
        fi

        # We have found it
        echo "${d%/id}"
        return 0
    done

    # We haven't found it
    return 1
}


function lookup_name_ptrn
{
    local name_ptrn="$1"

    # For each device having an ID (bustype/vendor/product/version)
    for d in /sys/class/input/*/id; do

        # If the device is not connected via USB
        if [ "`< $d/bustype`" != "0003" ]; then
            continue
        fi

        # If the device name doesn't match
        if [[ "`< ${d%/id}/name`" != $name_ptrn ]]; then
            continue
        fi

        # We have found it
        echo "${d%/id}"
        return 0
    done

    # We haven't found it
    return 1
}


function dump_report
{
    local usb_id="$1"

    pause "HID REPORT DESCRIPTOR DUMP" "\
The tablet will be detached from the kernel.

In order to dump the tablet report descriptor, the ${0##*/} will detach the
device from the kernel driver. To re-attach the device simply unplug and
plug back the tablet.
"
    echo "HID REPORT DESCRIPTOR DUMP"
    $HIDRD_DUMP ${usb_id%:*} ${usb_id#*:}
    echo
}


function dump_capabilities
{
    local path="$1"

    echo "CAPABILITIES"

    for c in "$path"/capabilities/*; do
        echo ${c##*/}:$'\t'`< "$c"`
    done

    echo
}


function dump_lsusb
{
    local usb_id="$1"

    echo "LSUSB DUMP"
    lsusb -v -d "$usb_id"

    echo
}


function capture_input
{
    local title="$1"
    local message="$2"
    local device="$3"
    local status="0"

    cat 1>&2 <<END
$title

$message

Press Enter to start the capture, press Enter once again when finished.
END

    read -s
    echo "Capturing..." 1>&2
    echo "$title"
    $EVDEV_DUMP $device &
    read -s
    kill $! 2>/dev/null
    # We need to capture the error code, so disable "dying" temporarily
    set +e
    wait $! 2>/dev/null
    status=$?
    set -e
    # If it has stopped not because we've killed it
    if (( $status != 143 )); then
        return 1
    fi
    echo
    echo "Done." 1>&2
    echo 1>&2
}


function capture_pen_input
{
    local device="$1"

    #
    # Ask for wakeup
    #
    pause "PEN WAKEUP" "\
Please touch the drawing surface with the pen briefly.

This is required to ensure that the pen is not in the sleep mode and will
report the events immediately."

    #
    # Capture edge strokes
    #
    capture_input "PEN EDGE STROKES" "\
Please make four strokes with the tablet pen.

Each stroke should be made over the edge of the drawing area, outwards,
starting from the top edge and continuing clockwise, as in the illustration
below:

    .---------------------------.
    |            /|\            |
    |   .---------+---------.   |
    |   |       1 |         |   |
    |   |                 2 |   |
    | <-+--               --+-> |
    |   | 4                 |   |
    |   |         | 3       |   |
    |   '---------+---------'   |
     \           \|/           / 
      '-----------------------'
" "$device"


    #
    # Capture button clicks
    #
    capture_input "PEN BUTTON CLICKS" "\
Please click every pen button one after another, starting from the tip.

To ensure that all the buttons are correctly detected, click the buttons,
while holding the pen tip upon the drawing surface, as in the illustration
below:

           |   |      3             1. Press the pen upon
           |   |) <----                the drawing surface.
           |   |:     2             2. Click the first button.
     1 |   |   |) <----             3. Click the second button.
       |   |   |                    ...
      \|/   \ /
    _________V__________
    / / / / / / / / / / 
" "$device"
}


function capture_mouse_input
{
    local device="$1"

    #
    # Ask for wakeup
    #
    pause "MOUSE WAKEUP" "\
Please place the mouse on the drawing surface and click the left button.

This is required to ensure that the mouse is not in the sleep mode and will
report the events immediately."

    #
    # Capture movement
    #
    capture_input "MOUSE MOVEMENT" "\
Please move the mouse in a circle.

Place the mouse near the top edge of the drawing area, and move it around
the whole area, clockwise, and back to the original position, as in the
illustration below:

    .---------------------------.
    |                           |
    |   .-------------------.   |
    |   |    .-> (~) ->.    |   |
    |   |   /           \   |   |
    |   |  ^             v  |   |
    |   |   \           /   |   |
    |   |    '<------<-'    |   |
    |   '-------------------'   |
     \                         / 
      '-----------------------'
" "$device"


    #
    # Capture clicks
    #
    capture_input "MOUSE BUTTON CLICKS" "\
Please click every mouse button one after the other.

Place the mouse upon the drawing area and click the buttons in the following
order:

Left, right, middle, any other buttons.
" "$device"

    #
    # Capture wheel
    #
    capture_input "MOUSE WHEEL ROTATION" "\
Rotate the mouse wheel in both directions.

Place the mouse upon the drawing area and rotate the mouse wheel, first
moving the finger outside the mouse, then inside.

If you have more than one wheel on your mouse, rotate the primary wheel
first and then any other wheels. If you have any horizontal wheels, rotate
them to the left first and then to the right.
" "$device"
}


DEVICE_USB_ID=""
DEVICE_NAME_PTRN=""
OUTPUT=""

DEVICE_PATH=""

#
# Parse command line arguments
#
while getopts "i:n:o:h" name; do
    case $name in
        i)
            DEVICE_USB_ID="$OPTARG"
            ;;
        n)
            DEVICE_NAME_PTRN="$OPTARG"
            ;;
        o)
            OUTPUT="$OPTARG"
            ;;
        h)
            usage
            exit 0
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

if [ -z "$DEVICE_NAME_PTRN" ] && [ -z "$DEVICE_USB_ID" ]; then
    DEVICE_NAME_PTRN="$DEFAULT_DEVICE_NAME_PTRN"
fi

if [ -z "$OUTPUT" ] || [ "$OUTPUT" == "-" ]; then
    OUTPUT="/dev/stdout"
fi

#
# Lookup device in the sysfs tree
#
if [ -n "$DEVICE_USB_ID" ]; then
    DEVICE_USB_ID_PATH=`lookup_usb_id "$DEVICE_USB_ID" || true`
fi

if [ -n "$DEVICE_NAME_PTRN" ]; then
    DEVICE_NAME_PTRN_PATH=`lookup_name_ptrn "$DEVICE_NAME_PTRN" || true`
fi

if [ -n "$DEVICE_USB_ID" ] && [ -n "$DEVICE_NAME_PTRN" ] &&
   [ "$DEVICE_USB_ID_PATH" != "$DEVICE_NAME_PTRN_PATH"]; then
   echo "Device not found." 1>&2
   exit 1
fi

if [ -n "$DEVICE_USB_ID_PATH" ]; then
    DEVICE_PATH="$DEVICE_USB_ID_PATH"
elif [ -n "$DEVICE_NAME_PTRN_PATH" ]; then
    DEVICE_PATH="$DEVICE_NAME_PTRN_PATH"
else
   echo "Device not found." 1>&2
   exit 1
fi

#
# Fetch device parameters
#
if [ -z "$DEVICE_USB_ID" ]; then
    DEVICE_USB_ID="`< $DEVICE_PATH/id/vendor`:`< $DEVICE_PATH/id/product`"
fi

DEVICE_NAME="`< $DEVICE_PATH/name`"

DEVICE_EVENT_PATH=`ls -1d "$DEVICE_PATH"/event*|head -n1`
if [ -z "$DEVICE_EVENT_PATH" ]; then
    echo "Device has no event device file." 1>&2
    exit 1
fi
DEVICE_EVENT_PATH="/dev/input/${DEVICE_EVENT_PATH##*/}"


#
# Describe what has been found
#
cat 1>&2 <<END
TABLET FOUND

Name:           $DEVICE_NAME
USB ID:         $DEVICE_USB_ID
Sysfs path:     $DEVICE_PATH
Event device:   $DEVICE_EVENT_PATH

END


#
# Start capturing output
#
(
    # Report system parameters
    echo "SYSTEM"
    echo "Kernel:       `uname -r`"
    echo

    # Report device ID and parameters
    echo "IDENTIFICATION"
    echo "Name:         $DEVICE_NAME"
    echo "USB ID:       $DEVICE_USB_ID"
    echo

    dump_capabilities "$DEVICE_PATH"
    dump_lsusb "$DEVICE_USB_ID"
    capture_pen_input "$DEVICE_EVENT_PATH"
    if confirm "Does the tablet have a mouse"; then
        capture_mouse_input "$DEVICE_EVENT_PATH"
    fi
    dump_report "$DEVICE_USB_ID"
) > $OUTPUT

echo "Finished." 1>&2


